문장: 명령어 하나
;(세미콜론): 문장이 끝났다는것을 알리기위한 기호
구문(or블록): {}(중괄호)로 묶여있는 문장들의 단위 or 지역변수의 생존범위
.(점): 오른쪽의 것은 왼쪽의 것에 포함되어있는 것

변수: 데이터를 가지고 있는것
-int: 정수
-float: 실수
-string: 문자열
-bool: 참 또는 거짓
함수: 필요할때 불러쓰는 구문
매개변수: 함수 외부에서 값을 받아와서 문장을 실행하기 위한 변수
리턴: 함수의 값을 호출
전역변수: 함수 밖에서도 사용 가능한 변수
지역변수: 함수 안에서만 사용 가능한 변수

class: 
public: 클래스 바깥에서 사용할 수 있도록 해주는 것
private: 클래스 안에서만 사용할 수 있도록 해주는 것

if: 괄호안의 문장이 참이라면 실행
ㄴelse: 괄호안의 문장이 거짓이라면 실행
ㄴelse if: if의 괄호 안의 문장이 거짓이고 else if의 괄호 안의 문장이 참일때 실행
switch: 괄호 안의 것의 상태에 따라 다르게 실행
for: 구문 안의 문장들을 일정 횟수만큼 반복해주는 것
while: 특정 조건을 만족하지 않을때까지 구문안의 문장들을 반복해주는 것
break: 구문을 나감
continue: 한 구문만 나간뒤 그 구문을 처음부터 다시실행

=: 오른쪽의 것을 왼쪽의 것에 대입
!: 반대의 것(참이라면 거짓, 거짓이라면 참)
+=, -=, *=, /=: 왼쪽의 것에서 오른쪽의것 만큼 =앞의 기호에따라 연산후 대입
==:왼쪽의 것과 오른쪽의 것이 같다는 뜻
!=: 왼쪽의 것과 오른쪽의 것이 다르다는 뜻
||: 왼쪽이 참 또는 오른쪽이 참
&&: 왼쪽과 오른쪽이 모두 참

Console.WirteLine: 괄호 안의 것을 출력
Console.ReadLine: 콘솔에서 입력하면 입력값을 괄호 안에 대입

[디버깅]
F9: 브레이킹 포인트
F11: 변수의 값을 볼 수 있음
F12: 함수의 원본을 볼 수 있음

[게임시스템 기획]
퀘스트: 보상을 받기위한 의뢰
인벤토리: 소지하고있는 물품, 장비 등을 볼수있는 창
쿨타임: 재사용 가능하기까지의 남은 시간

[유니티]
게임오브젝트(GameObject): 게임 내의 오브젝트
UI: 카메라의 위치에 상관 없이 보이는 오브젝트
하이어라키(Hierarchy): 게임오브젝트들을 나열해논 창
-메인카메라(Main Camera): 가장 기본이 되는 카메라
인스펙터(Inspector): 한 오브젝트의 컴포넌트들을 볼 수 있는 창
씬(Scene): 오브젝트들을 이용해 만든 하나의 시뮬레이션
에셋(Assets): 하나의 게임 그 자체
에셋스토어(Asset Store): 에셋을 다운로드 받는 곳
콘솔(Console): 씬에서 주의사항이나 오류들을 알려주고 원하는 글을 출력할 수 있는 창
컴포넌트(Component): 오브젝트의 상태나 기능을 조절할 수 있는 것
-트랜스폼(Transform): 오브젝트의 위치, 방향, 크기를 조절할 수 있는 컴포넌트
ㄴ포지션(Position): 오브젝트의 위치를 조절할 수 있는 것
ㄴ로테이션(Rotation): 오브젝트의 방향을 조절할 수 있는 것
ㄴ스케일(Scale): 오브젝트의 크기를 조절할 수 있는 것
-스프라이트렌더러(Sprite Renderer): 오브젝트의 생김새를 조절할 수 있는 컴포넌트
ㄴ스프라이트(Sprite): 오브젝트 이미지
ㄴ머트리얼(Material): 스프라이트의 재질같은 것
-리지드바디(Rigidbody2D): 오브젝트의 중력을 관리하는 컴포넌트
-콜라이더(Collider 2D): 오브젝트간의 충돌을 관리하는 컴포넌트
ㄴ트리거(is Trigger): 충돌한 두 오브젝트가 충돌해서 통과할지 부딪힐지 결정하는 것
-타입맵(Tilemap): 원하는 이미지를 타일처럼 일정한 간격으로 붙여넣기 위한 컴포넌트
스크립트(Script): 원하는 기능을 명령어를 이용해 만드는 것
프리펩스(Prefabs): 어떠한 상태의 오브젝트를 쉽게 불러올 수 있도록 하는 기능
태그(tag): 오브젝트가 속해있는 집단을 정하는 것

[스크립트]
Player 
-플레이어의 스텟 조정
-플레이어가 일정 경험치를 얻으면 레벨업
-플레이어의 체력이 0 이하가 되면 사망
Opossum
-몬스터가 왼쪽으로 매 프레임마다 이동
-플레이어와 충돌했을때 삭제
Aim
-카메라의 위치를 조정
Bullet
-총알이 몬스터에게 닿았을때 몬스터가 삭제되고 "Attack!"을 출력함
SuperMode
-플레이어가 하얀색이 되었다 말았다 하게 해줌
Dynamic
-플레이어의 이동과 점프를 제어
GameManager
-몬스터들의 리스폰을 제어
-게임을 다시시작할 수 있게 해줌
-게임의 상태를 콘솔에 표시
CameraTracker
-카메라의 위치를 조정

[스크립팅API]
Start: 씬을 시작하고 나서 한번 실행하는 함수
Update: 씬을 시작하고 나서 매 프레임마다 실행하는 함수
LateUpdate: 씬을 시작하고 나서 매 프레임마다 업데이트 함수 뒤에 실행하는 함수
FixedUpdate: 씬을 시작하고 나서 유니티 내에서 0.02초마다 실행하는 함수
Awake: 씬을 시작하고 나서 가장먼저 한번 실행하는 함수
IEnumerator: 코루틴함수를 실행시키기위한 것
-yield return: 코드의 시간간격을 정하기위한 것
OnTriggerEnter2D: 트리거충돌을 한 오브젝트를 이용해 충돌할 때 실행하는 함수
OnCollisionEnter2D: 일반충돌을 한 오브젝트를 이용해 충돌할 때 실행하는 함수
OnCollisionExit2D: 일반충돌을 한 뒤 벗어날때 실행하는 함수
Mathf: 수학 관련 함수
ㄴMathf.Min(a, b): a, b중 최솟값
ㄴMathf.Max(a, b): a, b중 최댓값
ㄴMathf.Clamp(a, min, max): a를 min과 max사이로 고정
ㄴMathf.Floor(a): a를 내림
ㄴMathf.Round(a): a를 반올림
-연속 메모리이기 때문에 특정 요소에 빠르게 접근가능
-크기를 바꾸려면 배열 전체를 다시 할당해야함
리스트
-가변 배열
ㄴlist.Add(a): 리스트 마지막에 a를 추가
ㄴMathf.Ceil(a): a를 올림
Vector3.Distance: 두 오브젝트 사이의 거리

[자료구조]
배열
-고정된 개수만큼 연속된 메모리 공간을 할당
ㄴlist.Remove(a): a를 찾아서 삭제
ㄴlist.RemoveAt(a): list[a]를 삭제
ㄴlist.insert(a, b): list[a]에 b를 추가
ㄴint index = list.IndexOf(a): index = a의 순서
ㄴbool a = list.Contains(b): b가 리스트에 있는지 여부 확인
-Dictionary<string, string> a;
ㄴa.Add("aaa", "010"): aaa라는 곳에 010이라는 값을 추가
ㄴstring num = a["aaa"]: num = "aaa"의 값
ㄴa.TryGetValue("aaa", out b): b에 "aaa"라는곳의 값을 추가
스택
-가장 나중에 넣은 데이터를 가장 먼저 사용(Last In First Out(LIFO))
-예시: 웹 브라우저에서 뒤로가기를 누르면 이전 페이지로 이동
-예시: 모바일 게임의 UI가 여러층으로 열려있을 때 X버튼을 누르면 최상위의 UI가 닫힘
ㄴstacks.Push(a): 스택에 a추가
ㄴstacks.Peek(): 스택에서 가장 마지막에 추가한 값을 호출
ㄴstacks.Pop(): 스택에서 가장 마지막에 추가한 값 호출과 함께 스택에서 삭제
큐
-가장 처음에 넣은 데이터를 가장 먼저 사용(First In First Out(FIFO))
-예시: 서버와 클라이언트가 주고 받는 네트워크 패킷
-예시: 윈도우 운영체제의 메시지
ㄴqueue.Enqueue(a): 큐에 a를 추가
ㄴqueue.Peek(): 큐에서 가장 처음에 추가한 값을 호출
ㄴqueue.Dequeue(): 큐에서 가장 처음에 추가한 값을 호출과 함께 큐에서 삭제
